{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rosic\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\UNIVESP\\\\gerenciadorTarefas\\\\gerenciador-tarefas\\\\src\\\\Pages\\\\MeuCadastro\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { supabase } from \"../../supabaseClient\";\nimport { Titulo, Botao, BotaoClicado, CaixaTexto } from \"../../Componentes/ComponentesIcones\";\nimport Footer from \"../../Componentes/Footer\";\nimport \"./meuCadastro.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MeuCadastro() {\n  _s();\n  const [nome, setNome] = useState(\"\");\n  const [email, setEmail] = useState(\"\"); // O email será apenas para leitura\n  const [senha, setSenha] = useState(\"\");\n  const [confirmarSenha, setConfirmarSenha] = useState(\"\");\n  const [erro, setErro] = useState(null);\n  const navigate = useNavigate();\n\n  // Usando useEffect para pegar as informações do usuário logado\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser(); // Usando getUser() no lugar de user()\n\n      if (user) {\n        // Busca o nome do usuário na tabela 'usuarios' usando o iduser do supabase\n        const {\n          data,\n          error\n        } = await supabase.from(\"usuarios\").select(\"nome\").eq(\"iduser\", user.id) // Compara o id do usuário com o id da tabela\n        .single(); // Espera um único resultado\n\n        if (error) {\n          console.error(\"Erro ao buscar nome do usuário:\", error.message);\n          setErro(\"Erro ao carregar o nome do usuário.\");\n        } else {\n          setNome((data === null || data === void 0 ? void 0 : data.nome) || \"Nome não disponível\");\n          setEmail(user.email); // O email do Supabase é carregado aqui\n        }\n      } else {\n        setErro(\"Usuário não autenticado.\");\n        navigate(\"/dashboard\"); // Redireciona para o login se o usuário não estiver autenticado\n      }\n    };\n    fetchUser();\n  }, [navigate]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setErro(null);\n\n    // Verificando se as senhas coincidem\n    if (senha !== confirmarSenha) {\n      setErro(\"As senhas não coincidem.\");\n      return;\n    }\n\n    // Obtém o usuário logado\n    const {\n      data: {\n        user\n      },\n      error\n    } = await supabase.auth.getUser();\n    if (error || !user) {\n      setErro(\"Usuário não está logado.\");\n      return;\n    }\n    try {\n      // Atualizando os dados do usuário na tabela 'usuarios', mas não atualizando o e-mail\n      const {\n        error: updateError\n      } = await supabase.from(\"usuarios\").update({\n        nome\n      }) // Atualiza o nome\n      .eq(\"iduser\", user.id); // Usando o ID do usuário para realizar a atualização\n\n      if (updateError) {\n        console.error(\"Erro ao atualizar no banco:\", updateError);\n        setErro(\"Erro ao atualizar informações no banco de dados.\");\n      } else {\n        // Atualizando a senha do usuário no Supabase\n        if (senha) {\n          const {\n            error: passwordError\n          } = await supabase.auth.updateUser({\n            password: senha // Atualiza a senha do usuário no Supabase\n          });\n          if (passwordError) {\n            setErro(\"Erro ao atualizar a senha.\");\n            return;\n          }\n        }\n\n        // Após atualizar as informações, redireciona para a tela inicial\n        navigate(\"/dashboard\");\n      }\n    } catch (err) {\n      console.error(\"Erro inesperado:\", err);\n      setErro(\"Erro inesperado.\");\n    }\n  };\n  const handleDeleteAccount = async () => {\n    const confirmDelete = window.confirm(\"Tem certeza que deseja excluir sua conta?\");\n    if (confirmDelete) {\n      const {\n        data: {\n          user\n        },\n        error\n      } = await supabase.auth.getUser();\n      if (error || !user) {\n        setErro(\"Erro ao buscar usuário.\");\n        return;\n      }\n      try {\n        const {\n          error: deleteError\n        } = await supabase.auth.api.deleteUser(user.id);\n        if (deleteError) {\n          setErro(\"Erro ao excluir a conta.\");\n        } else {\n          navigate(\"/\"); // Após excluir, redireciona para a tela de login\n        }\n      } catch (err) {\n        console.error(\"Erro ao excluir a conta:\", err);\n        setErro(\"Erro inesperado ao excluir a conta.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 4\n  }, this);\n}\n_s(MeuCadastro, \"SwaxHJmHMSWzqC428SsspmRz3vI=\", false, function () {\n  return [useNavigate];\n});\n_c = MeuCadastro;\nvar _c;\n$RefreshReg$(_c, \"MeuCadastro\");","map":{"version":3,"names":["React","useState","useEffect","Link","useNavigate","supabase","Titulo","Botao","BotaoClicado","CaixaTexto","Footer","jsxDEV","_jsxDEV","MeuCadastro","_s","nome","setNome","email","setEmail","senha","setSenha","confirmarSenha","setConfirmarSenha","erro","setErro","navigate","fetchUser","data","user","auth","getUser","error","from","select","eq","id","single","console","message","handleSubmit","e","preventDefault","updateError","update","passwordError","updateUser","password","err","handleDeleteAccount","confirmDelete","window","confirm","deleteError","api","deleteUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rosic/OneDrive/Área de Trabalho/UNIVESP/gerenciadorTarefas/gerenciador-tarefas/src/Pages/MeuCadastro/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { supabase } from \"../../supabaseClient\";\r\nimport { Titulo, Botao, BotaoClicado, CaixaTexto } from \"../../Componentes/ComponentesIcones\";\r\nimport Footer from \"../../Componentes/Footer\"\r\nimport \"./meuCadastro.css\";\r\n\r\nexport default function MeuCadastro() {\r\n  const [nome, setNome] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\"); // O email será apenas para leitura\r\n  const [senha, setSenha] = useState(\"\");\r\n  const [confirmarSenha, setConfirmarSenha] = useState(\"\");\r\n  const [erro, setErro] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Usando useEffect para pegar as informações do usuário logado\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      const { data: { user } } = await supabase.auth.getUser(); // Usando getUser() no lugar de user()\r\n\r\n      if (user) {\r\n        // Busca o nome do usuário na tabela 'usuarios' usando o iduser do supabase\r\n        const { data, error } = await supabase\r\n          .from(\"usuarios\")\r\n          .select(\"nome\")\r\n          .eq(\"iduser\", user.id) // Compara o id do usuário com o id da tabela\r\n          .single(); // Espera um único resultado\r\n\r\n        if (error) {\r\n          console.error(\"Erro ao buscar nome do usuário:\", error.message);\r\n          setErro(\"Erro ao carregar o nome do usuário.\");\r\n        } else {\r\n          setNome(data?.nome || \"Nome não disponível\");\r\n          setEmail(user.email); // O email do Supabase é carregado aqui\r\n        }\r\n      } else {\r\n        setErro(\"Usuário não autenticado.\");\r\n        navigate(\"/dashboard\"); // Redireciona para o login se o usuário não estiver autenticado\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, [navigate]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setErro(null);\r\n\r\n    // Verificando se as senhas coincidem\r\n    if (senha !== confirmarSenha) {\r\n      setErro(\"As senhas não coincidem.\");\r\n      return;\r\n    }\r\n\r\n    // Obtém o usuário logado\r\n    const { data: { user }, error } = await supabase.auth.getUser();\r\n\r\n    if (error || !user) {\r\n      setErro(\"Usuário não está logado.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Atualizando os dados do usuário na tabela 'usuarios', mas não atualizando o e-mail\r\n      const { error: updateError } = await supabase\r\n        .from(\"usuarios\")\r\n        .update({ nome }) // Atualiza o nome\r\n        .eq(\"iduser\", user.id); // Usando o ID do usuário para realizar a atualização\r\n\r\n      if (updateError) {\r\n        console.error(\"Erro ao atualizar no banco:\", updateError);\r\n        setErro(\"Erro ao atualizar informações no banco de dados.\");\r\n      } else {\r\n        // Atualizando a senha do usuário no Supabase\r\n        if (senha) {\r\n          const { error: passwordError } = await supabase.auth.updateUser({\r\n            password: senha, // Atualiza a senha do usuário no Supabase\r\n          });\r\n\r\n          if (passwordError) {\r\n            setErro(\"Erro ao atualizar a senha.\");\r\n            return;\r\n          }\r\n        }\r\n\r\n        // Após atualizar as informações, redireciona para a tela inicial\r\n        navigate(\"/dashboard\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Erro inesperado:\", err);\r\n      setErro(\"Erro inesperado.\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteAccount = async () => {\r\n    const confirmDelete = window.confirm(\"Tem certeza que deseja excluir sua conta?\");\r\n    if (confirmDelete) {\r\n      const { data: { user }, error } = await supabase.auth.getUser();\r\n\r\n      if (error || !user) {\r\n        setErro(\"Erro ao buscar usuário.\");\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const { error: deleteError } = await supabase.auth.api.deleteUser(user.id);\r\n\r\n        if (deleteError) {\r\n          setErro(\"Erro ao excluir a conta.\");\r\n        } else {\r\n          navigate(\"/\"); // Após excluir, redireciona para a tela de login\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Erro ao excluir a conta:\", err);\r\n        setErro(\"Erro inesperado ao excluir a conta.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n   <div></div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}